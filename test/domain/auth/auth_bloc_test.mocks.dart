// Mocks generated by Mockito 5.3.2 from annotations
// in kind_owl/test/domain/auth/auth_bloc_test.dart.
// Do not manually edit this file.

// ignore_for_file: no_leading_underscores_for_library_prefixes
import 'dart:async' as _i7;

import 'package:cloud_firestore/cloud_firestore.dart' as _i3;
import 'package:firebase_auth/firebase_auth.dart' as _i2;
import 'package:kind_owl/common/data/i_auth_service.dart' as _i4;
import 'package:kind_owl/common/domain/entities/user_entity.dart' as _i5;
import 'package:kind_owl/feature/auth/data/firebase_auth_service.dart' as _i6;
import 'package:kind_owl/feature/auth/domain/firebase_auth_repository.dart'
    as _i8;
import 'package:mockito/mockito.dart' as _i1;

// ignore_for_file: type=lint
// ignore_for_file: avoid_redundant_argument_values
// ignore_for_file: avoid_setters_without_getters
// ignore_for_file: comment_references
// ignore_for_file: implementation_imports
// ignore_for_file: invalid_use_of_visible_for_testing_member
// ignore_for_file: prefer_const_constructors
// ignore_for_file: unnecessary_parenthesis
// ignore_for_file: camel_case_types
// ignore_for_file: subtype_of_sealed_class

class _FakeFirebaseAuth_0 extends _i1.SmartFake implements _i2.FirebaseAuth {
  _FakeFirebaseAuth_0(
    Object parent,
    Invocation parentInvocation,
  ) : super(
          parent,
          parentInvocation,
        );
}

class _FakeFirebaseFirestore_1 extends _i1.SmartFake
    implements _i3.FirebaseFirestore {
  _FakeFirebaseFirestore_1(
    Object parent,
    Invocation parentInvocation,
  ) : super(
          parent,
          parentInvocation,
        );
}

class _FakeIAuthService_2 extends _i1.SmartFake implements _i4.IAuthService {
  _FakeIAuthService_2(
    Object parent,
    Invocation parentInvocation,
  ) : super(
          parent,
          parentInvocation,
        );
}

class _FakeUserEntity_3 extends _i1.SmartFake implements _i5.UserEntity {
  _FakeUserEntity_3(
    Object parent,
    Invocation parentInvocation,
  ) : super(
          parent,
          parentInvocation,
        );
}

/// A class which mocks [FirebaseAuthService].
///
/// See the documentation for Mockito's code generation for more information.
class MockFirebaseAuthService extends _i1.Mock
    implements _i6.FirebaseAuthService {
  MockFirebaseAuthService() {
    _i1.throwOnMissingStub(this);
  }

  @override
  _i2.FirebaseAuth get fbAuth => (super.noSuchMethod(
        Invocation.getter(#fbAuth),
        returnValue: _FakeFirebaseAuth_0(
          this,
          Invocation.getter(#fbAuth),
        ),
      ) as _i2.FirebaseAuth);
  @override
  set fbAuth(_i2.FirebaseAuth? _fbAuth) => super.noSuchMethod(
        Invocation.setter(
          #fbAuth,
          _fbAuth,
        ),
        returnValueForMissingStub: null,
      );
  @override
  _i3.FirebaseFirestore get fbStore => (super.noSuchMethod(
        Invocation.getter(#fbStore),
        returnValue: _FakeFirebaseFirestore_1(
          this,
          Invocation.getter(#fbStore),
        ),
      ) as _i3.FirebaseFirestore);
  @override
  set fbStore(_i3.FirebaseFirestore? _fbStore) => super.noSuchMethod(
        Invocation.setter(
          #fbStore,
          _fbStore,
        ),
        returnValueForMissingStub: null,
      );
  @override
  set fbUser(_i2.User? _fbUser) => super.noSuchMethod(
        Invocation.setter(
          #fbUser,
          _fbUser,
        ),
        returnValueForMissingStub: null,
      );
  @override
  _i7.Future<dynamic> prepare() => (super.noSuchMethod(
        Invocation.method(
          #prepare,
          [],
        ),
        returnValue: _i7.Future<dynamic>.value(),
      ) as _i7.Future<dynamic>);
  @override
  _i7.Future<_i2.User?> signIn({
    required String? email,
    required String? password,
  }) =>
      (super.noSuchMethod(
        Invocation.method(
          #signIn,
          [],
          {
            #email: email,
            #password: password,
          },
        ),
        returnValue: _i7.Future<_i2.User?>.value(),
      ) as _i7.Future<_i2.User?>);
  @override
  _i7.Future<_i2.User?> register({
    required String? email,
    required String? password,
  }) =>
      (super.noSuchMethod(
        Invocation.method(
          #register,
          [],
          {
            #email: email,
            #password: password,
          },
        ),
        returnValue: _i7.Future<_i2.User?>.value(),
      ) as _i7.Future<_i2.User?>);
  @override
  void signOut() => super.noSuchMethod(
        Invocation.method(
          #signOut,
          [],
        ),
        returnValueForMissingStub: null,
      );
}

/// A class which mocks [FirebaseAuthRepository].
///
/// See the documentation for Mockito's code generation for more information.
class MockFirebaseAuthRepository extends _i1.Mock
    implements _i8.FirebaseAuthRepository {
  MockFirebaseAuthRepository() {
    _i1.throwOnMissingStub(this);
  }

  @override
  _i4.IAuthService get authService => (super.noSuchMethod(
        Invocation.getter(#authService),
        returnValue: _FakeIAuthService_2(
          this,
          Invocation.getter(#authService),
        ),
      ) as _i4.IAuthService);
  @override
  set userDto(_i2.User? _userDto) => super.noSuchMethod(
        Invocation.setter(
          #userDto,
          _userDto,
        ),
        returnValueForMissingStub: null,
      );
  @override
  _i7.Future<_i5.UserEntity> signIn({
    required String? email,
    required String? password,
  }) =>
      (super.noSuchMethod(
        Invocation.method(
          #signIn,
          [],
          {
            #email: email,
            #password: password,
          },
        ),
        returnValue: _i7.Future<_i5.UserEntity>.value(_FakeUserEntity_3(
          this,
          Invocation.method(
            #signIn,
            [],
            {
              #email: email,
              #password: password,
            },
          ),
        )),
      ) as _i7.Future<_i5.UserEntity>);
  @override
  _i7.Future<_i5.UserEntity> register({
    required String? email,
    required String? password,
  }) =>
      (super.noSuchMethod(
        Invocation.method(
          #register,
          [],
          {
            #email: email,
            #password: password,
          },
        ),
        returnValue: _i7.Future<_i5.UserEntity>.value(_FakeUserEntity_3(
          this,
          Invocation.method(
            #register,
            [],
            {
              #email: email,
              #password: password,
            },
          ),
        )),
      ) as _i7.Future<_i5.UserEntity>);
}
